[{"/Users/keywalker/Documents/GitHub/Chat-App/src/index.tsx":"1","/Users/keywalker/Documents/GitHub/Chat-App/src/reportWebVitals.ts":"2","/Users/keywalker/Documents/GitHub/Chat-App/src/App.tsx":"3","/Users/keywalker/Documents/GitHub/Chat-App/src/models.tsx":"4","/Users/keywalker/Documents/GitHub/Chat-App/src/features/Chat/Chat.module.ts":"5","/Users/keywalker/Documents/GitHub/Chat-App/src/theme.tsx":"6","/Users/keywalker/Documents/GitHub/Chat-App/src/features/Chat/pages/Chat.ts":"7","/Users/keywalker/Documents/GitHub/Chat-App/src/features/Chat/pages/ChatPage.tsx":"8","/Users/keywalker/Documents/GitHub/Chat-App/src/components/SelectUser/SelectUser.tsx":"9","/Users/keywalker/Documents/GitHub/Chat-App/src/components/SelectUser/SelectUserStyle.ts":"10","/Users/keywalker/Documents/GitHub/Chat-App/src/components/SelectChannel/SelectChannel.tsx":"11","/Users/keywalker/Documents/GitHub/Chat-App/src/components/SelectChannel/SelectChannelStyle.ts":"12","/Users/keywalker/Documents/GitHub/Chat-App/src/contexts/GlobalContext.tsx":"13","/Users/keywalker/Documents/GitHub/Chat-App/src/components/Loading/LoadingStyle.ts":"14","/Users/keywalker/Documents/GitHub/Chat-App/src/components/PostMessageButton/PostMessageButton.tsx":"15","/Users/keywalker/Documents/GitHub/Chat-App/src/globalStyles.ts":"16","/Users/keywalker/Documents/GitHub/Chat-App/src/components/ReadMoreButton/ReadMoreButton.tsx":"17"},{"size":819,"mtime":1652711963719,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":1652709650623,"results":"20","hashOfConfig":"19"},{"size":648,"mtime":1653024837777,"results":"21","hashOfConfig":"19"},{"size":12748,"mtime":1652967451972,"results":"22","hashOfConfig":"19"},{"size":160,"mtime":1652955648200,"results":"23","hashOfConfig":"19"},{"size":219,"mtime":1652876787455,"results":"24","hashOfConfig":"19"},{"size":3263,"mtime":1653044953370,"results":"25","hashOfConfig":"19"},{"size":5289,"mtime":1653045492425,"results":"26","hashOfConfig":"19"},{"size":797,"mtime":1653045388031,"results":"27","hashOfConfig":"19"},{"size":685,"mtime":1652984938881,"results":"28","hashOfConfig":"19"},{"size":1524,"mtime":1653045380142,"results":"29","hashOfConfig":"19"},{"size":907,"mtime":1652984855475,"results":"30","hashOfConfig":"19"},{"size":1012,"mtime":1653027542916,"results":"31","hashOfConfig":"19"},{"size":392,"mtime":1653025370252,"results":"32","hashOfConfig":"19"},{"size":1338,"mtime":1653045366200,"results":"33","hashOfConfig":"19"},{"size":501,"mtime":1653025641145,"results":"34","hashOfConfig":"19"},{"size":1475,"mtime":1653045278851,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"sbl63y",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"39"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/keywalker/Documents/GitHub/Chat-App/src/index.tsx",[],[],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/reportWebVitals.ts",[],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/App.tsx",["93"],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/models.tsx",[],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/features/Chat/Chat.module.ts",["94","95"],[],"import React from 'react';\nimport Chat from './pages/ChatPage';\n\nexport default {\n  routeProps: {\n    path: '/Chat',\n    component: Chat\n  },\n  name: 'Chat',\n};","/Users/keywalker/Documents/GitHub/Chat-App/src/theme.tsx",[],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/features/Chat/pages/Chat.ts",["96"],[],"import styled from \"@emotion/styled\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport const Container = styled.div`\n  max-width: 1140px;\n  padding: 15px 0;\n  margin: 0 auto;\n  background: ${({ theme }) => theme.colors.primaryColor};\n  height: 100vh;\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  grid-template-rows: repeat(12, 1fr);\n  grid-column-gap: 3px;\n  \n`;\nexport const LeftBarSelector = styled.div`\n  grid-area: 1 / 1 / 12 / 5;\n  border-right: 1px solid #e6ecf3;\n`;\nexport const MainArea = styled.div`\n  display: grid;\n  grid-area: 1 / 5 / 12 / 16;\n`;\n\nexport const MessageArea = styled.div`\n  grid-area: 3 / 1 / 10 / 8;\n  padding: 1rem;\n`;\n\nexport const HeaderArea = styled.div`\n  grid-area: 1 / 1 / 3 / 6;\n  padding: 0 15px;\n  min-height: 64px;\n  line-height: 64px;\n  border-bottom: 1px solid #e6ecf3;\n  -webkit-border-radius: 0 3px 0 0;\n  -moz-border-radius: 0 3px 0 0;\n  border-radius: 0 3px 0 0;\n`;\n\nexport const ChatContainer = styled.ul`\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  display: inline-block;\n  width: 100%;\n  max-height: 650px;\n  overflow:auto;\n\n`;\n\nexport const ChatAvatar = styled.div`\n  margin-right: 20px;\n\n  img {\n    width: 48px;\n    height: 48px;\n    -webkit-border-radius: 30px;\n    -moz-border-radius: 30px;\n    border-radius: 30px;\n  }\n  p {\n    font-size: .75rem;\n    color: #999999;\n    text-align: center;\n    margin: 0;\n  }\n`;\n\nexport const ChatText = styled.div`\n    padding: 0.4rem 1rem;\n    -webkit-border-radius: 4px;\n    -moz-border-radius: 4px;\n    border-radius: 4px;\n    background: #ffffff;\n    font-weight: 300;\n    line-height: 150%;\n    position: relative;\n    '&:before':{\n      content: '';\n      position: absolute;\n      width: 0;\n      height: 0;\n      top: 10px;\n      left: -20px;\n      border: 10px solid;\n      border-color: transparent #ffffff transparent transparent;\n    }\n`;\n\nexport const DIV = styled.div`\n  height: auto\n`;\nexport const TextArea = styled.textarea`\n  display: block;\n  width: 100%;\n  height: auto;\n  min-height: 300px\n  max-height: 400px;\n  padding: 0.375rem 0;\n  margin-top: 1rem;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #495057;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n  transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;\n`;\nconst dynamicStyle = (props: { color: any; mat: any; }) => ({ flexDirection: props.color });\n\nexport const ChatLeft = styled.div`\n  margin-bottom: 1rem;\n  flex: 1;\n    `;\nexport const ChatList = styled.li`\n${dynamicStyle};\n  flex: 1;\n  display: flex;\n  margin-bottom: 40px;\n  width: 100%;\n`;\n\nexport const Title = styled.div`\n  max-width: 1140px;\n  padding: 15px;\n  margin: 0 auto;\n\n  h5{\n    font-size: 1.25rem;\n    margin: .2rem 0;\n  }\n\n  p{\n    margin-top: 0;\n  }\n`;\n\nexport const Date = styled.span`\n  align-self: center;\n  margin-left: 10px;\n  margin-right: 10px;\n  padding: 0;\n  font-size: 0.80rem;\n  justify-content: center;\n  flex-direction:row;\n  align-items: center;\n  display: flex;\n  text-align: center;\n\n  p {\n    font-size: .75rem;\n    color: #999999;\n    text-align: center;\n  }\n  FontAwesomeIcon {\n    color: green;\n  }\n  .fa-circle-check {\n    color: green\n  }\n`;\n",[],"/Users/keywalker/Documents/GitHub/Chat-App/src/features/Chat/pages/ChatPage.tsx",["97","98","99","100","101"],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/components/SelectUser/SelectUser.tsx",[],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/components/SelectUser/SelectUserStyle.ts",[],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/components/SelectChannel/SelectChannel.tsx",["102","103","104"],[],"import { FC } from \"react\"\nimport { ChannelId, useFetchLatestMessagesLazyQuery } from \"../../models\"\nimport { Menu, Title } from \"./SelectChannelStyle\"\nimport { useGlobalState } from \"../../contexts/GlobalContext\"\ninterface SelectChannelProps {\n  setisLoading: any\n}\n\nconst SelectChannel: FC<SelectChannelProps> = ({ setisLoading }) => {\n  const [state, dispatch] = useGlobalState()\n  const [getQuery, { data, error, loading }] = useFetchLatestMessagesLazyQuery()\n\n  const onClick = (channel: string) => {\n    setisLoading(true)\n    getQuery({\n      variables: { channelId: channel },\n    }).then((res) => {\n      console.log(res, \"reewrwfd\")\n      let d = res.data?.fetchLatestMessages\n      dispatch({ channel: channel, messages: d?.slice(0) })\n      setisLoading(false)\n    })\n  }\n\n  return (\n    <div className=\"SelectChannel\" data-testid=\"SelectChannel\">\n      <Title> 2. Choose Your Channel</Title>\n      <Menu>\n        <li onClick={() => onClick(ChannelId.General)} className={`${state.channel === ChannelId.General && \"active\"}`}>\n          <p>{ChannelId.General}</p>\n        </li>\n        <li\n          onClick={() => onClick(ChannelId.Technology)}\n          className={`${state.channel === ChannelId.Technology && \"active\"}`}\n        >\n          <p>{ChannelId.Technology}</p>\n        </li>\n        <li onClick={() => onClick(ChannelId.Lgtm)} className={`${state.channel === ChannelId.Lgtm && \"active\"}`}>\n          <p>{ChannelId.Lgtm}</p>\n        </li>\n      </Menu>\n    </div>\n  )\n}\n\nexport default SelectChannel\n","/Users/keywalker/Documents/GitHub/Chat-App/src/components/SelectChannel/SelectChannelStyle.ts",["105"],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/contexts/GlobalContext.tsx",[],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/components/Loading/LoadingStyle.ts",[],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/components/PostMessageButton/PostMessageButton.tsx",["106"],[],"import React, { FC } from \"react\"\nimport { ButtonBox } from \"src/globalStyles\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\"\nimport { useGlobalState } from \"src/contexts/GlobalContext\"\nimport { useMessagePostMutation } from \"src/models\"\n\ninterface PostMessageButtonProps {\n  text?: string\n  setisLoading?: any\n  setDate?: any\n}\n\nconst PostMessageButton: FC<PostMessageButtonProps> = ({ text, setisLoading, setDate }) => {\n  const [state, dispatch] = useGlobalState()\n  const [createMessage, { data, loading, error }] = useMessagePostMutation()\n\n  if (loading) {\n    console.log(\"bug\")\n  }\n  if (data) {\n    console.log(data, \"sad\")\n    setisLoading(false)\n\n    setDate(data.MessagePost?.datetime)\n  }\n\n  if (error) {\n    console.log(error, \"das\")\n  }\n\n  const onClick = async () => {\n    setisLoading(true)\n    const variables = { channelId: state.channel, text: state.message.value, userId: state.selectedUser }\n    createMessage({ variables })\n  }\n  return (\n    <div className=\"PostMessageButton\" data-testid=\"PostMessageButton\">\n      <ButtonBox onClick={onClick}>\n        {text} <FontAwesomeIcon icon={faPaperPlane} />\n      </ButtonBox>\n    </div>\n  )\n}\nPostMessageButton.defaultProps = {\n  text: \"Send Message\",\n}\nexport default PostMessageButton\n","/Users/keywalker/Documents/GitHub/Chat-App/src/globalStyles.ts",[],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/components/ReadMoreButton/ReadMoreButton.tsx",["107","108","109","110"],[],{"ruleId":"111","severity":1,"message":"112","line":16,"column":40,"nodeType":"113","messageId":"114","endLine":16,"endColumn":69},{"ruleId":"115","severity":1,"message":"116","line":1,"column":8,"nodeType":"117","messageId":"118","endLine":1,"endColumn":13},{"ruleId":"119","severity":1,"message":"120","line":4,"column":1,"nodeType":"121","endLine":10,"endColumn":3},{"ruleId":"115","severity":1,"message":"122","line":2,"column":10,"nodeType":"117","messageId":"118","endLine":2,"endColumn":25},{"ruleId":"115","severity":1,"message":"123","line":35,"column":16,"nodeType":"117","messageId":"118","endLine":35,"endColumn":24},{"ruleId":"115","severity":1,"message":"124","line":38,"column":35,"nodeType":"117","messageId":"118","endLine":38,"endColumn":42},{"ruleId":"125","severity":1,"message":"126","line":53,"column":6,"nodeType":"127","endLine":53,"endColumn":26,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":103,"column":27,"nodeType":"113","endLine":103,"endColumn":62},{"ruleId":"129","severity":1,"message":"130","line":128,"column":23,"nodeType":"113","endLine":128,"endColumn":65},{"ruleId":"115","severity":1,"message":"131","line":11,"column":22,"nodeType":"117","messageId":"118","endLine":11,"endColumn":26},{"ruleId":"115","severity":1,"message":"132","line":11,"column":28,"nodeType":"117","messageId":"118","endLine":11,"endColumn":33},{"ruleId":"115","severity":1,"message":"124","line":11,"column":35,"nodeType":"117","messageId":"118","endLine":11,"endColumn":42},{"ruleId":"115","severity":1,"message":"133","line":3,"column":7,"nodeType":"117","messageId":"118","endLine":3,"endColumn":19},{"ruleId":"115","severity":1,"message":"134","line":15,"column":17,"nodeType":"117","messageId":"118","endLine":15,"endColumn":25},{"ruleId":"115","severity":1,"message":"135","line":6,"column":10,"nodeType":"117","messageId":"118","endLine":6,"endColumn":32},{"ruleId":"115","severity":1,"message":"136","line":6,"column":65,"nodeType":"117","messageId":"118","endLine":6,"endColumn":90},{"ruleId":"115","severity":1,"message":"124","line":19,"column":25,"nodeType":"117","messageId":"118","endLine":19,"endColumn":32},{"ruleId":"115","severity":1,"message":"131","line":19,"column":34,"nodeType":"117","messageId":"118","endLine":19,"endColumn":38},"react/jsx-pascal-case","Imported JSX component routeProps must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","@typescript-eslint/no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'FontAwesomeIcon' is defined but never used.","'setError' is assigned a value but never used.","'loading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'data', 'dispatch', 'getQuery', 'state', and 'user'. Either include them or remove the dependency array.","ArrayExpression",["137"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'data' is assigned a value but never used.","'error' is assigned a value but never used.","'dynamicStyle' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'useMessagePostMutation' is defined but never used.","'useMessagesFetchMoreQuery' is defined but never used.",{"desc":"138","fix":"139"},"Update the dependencies array to be: [data, dispatch, getQuery, state, state.selectedUser, user]",{"range":"140","text":"141"},[1665,1685],"[data, dispatch, getQuery, state, state.selectedUser, user]"]