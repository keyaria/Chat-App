[{"/Users/keywalker/Documents/GitHub/Chat-App/src/index.tsx":"1","/Users/keywalker/Documents/GitHub/Chat-App/src/reportWebVitals.ts":"2","/Users/keywalker/Documents/GitHub/Chat-App/src/App.tsx":"3","/Users/keywalker/Documents/GitHub/Chat-App/src/models.tsx":"4","/Users/keywalker/Documents/GitHub/Chat-App/src/features/Chat/Chat.module.ts":"5","/Users/keywalker/Documents/GitHub/Chat-App/src/theme.tsx":"6","/Users/keywalker/Documents/GitHub/Chat-App/src/features/Chat/pages/Chat.ts":"7","/Users/keywalker/Documents/GitHub/Chat-App/src/features/Chat/pages/ChatPage.tsx":"8","/Users/keywalker/Documents/GitHub/Chat-App/src/components/SelectUser/SelectUser.tsx":"9","/Users/keywalker/Documents/GitHub/Chat-App/src/components/SelectUser/SelectUserStyle.ts":"10","/Users/keywalker/Documents/GitHub/Chat-App/src/components/SelectChannel/SelectChannel.tsx":"11","/Users/keywalker/Documents/GitHub/Chat-App/src/components/SelectChannel/SelectChannelStyle.ts":"12","/Users/keywalker/Documents/GitHub/Chat-App/src/contexts/GlobalContext.tsx":"13","/Users/keywalker/Documents/GitHub/Chat-App/src/components/Loading/LoadingStyle.ts":"14","/Users/keywalker/Documents/GitHub/Chat-App/src/components/PostMessageButton/PostMessageButton.tsx":"15","/Users/keywalker/Documents/GitHub/Chat-App/src/globalStyles.ts":"16","/Users/keywalker/Documents/GitHub/Chat-App/src/components/ReadMoreButton/ReadMoreButton.tsx":"17"},{"size":819,"mtime":1652711963719,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":1652709650623,"results":"20","hashOfConfig":"19"},{"size":568,"mtime":1653057208238,"results":"21","hashOfConfig":"19"},{"size":12748,"mtime":1652967451972,"results":"22","hashOfConfig":"19"},{"size":129,"mtime":1653057202366,"results":"23","hashOfConfig":"19"},{"size":219,"mtime":1652876787455,"results":"24","hashOfConfig":"19"},{"size":3197,"mtime":1653057218112,"results":"25","hashOfConfig":"19"},{"size":5045,"mtime":1653058343897,"results":"26","hashOfConfig":"19"},{"size":793,"mtime":1653056990454,"results":"27","hashOfConfig":"19"},{"size":685,"mtime":1652984938881,"results":"28","hashOfConfig":"19"},{"size":1489,"mtime":1653057878440,"results":"29","hashOfConfig":"19"},{"size":830,"mtime":1653056972923,"results":"30","hashOfConfig":"19"},{"size":1012,"mtime":1653027542916,"results":"31","hashOfConfig":"19"},{"size":392,"mtime":1653025370252,"results":"32","hashOfConfig":"19"},{"size":1258,"mtime":1653057868171,"results":"33","hashOfConfig":"19"},{"size":501,"mtime":1653025641145,"results":"34","hashOfConfig":"19"},{"size":1350,"mtime":1653057874501,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"sbl63y",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"67"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"67"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/keywalker/Documents/GitHub/Chat-App/src/index.tsx",[],[],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/reportWebVitals.ts",[],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/App.tsx",["91"],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/models.tsx",[],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/features/Chat/Chat.module.ts",["92"],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/theme.tsx",[],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/features/Chat/pages/Chat.ts",[],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/features/Chat/pages/ChatPage.tsx",["93","94","95","96"],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/components/SelectUser/SelectUser.tsx",[],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/components/SelectUser/SelectUserStyle.ts",[],[],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/components/SelectChannel/SelectChannel.tsx",["97","98","99"],[],"import { FC } from \"react\"\nimport { ChannelId, useFetchLatestMessagesLazyQuery } from \"../../models\"\nimport { Menu, Title } from \"./SelectChannelStyle\"\nimport { useGlobalState } from \"../../contexts/GlobalContext\"\ninterface SelectChannelProps {\n  setisLoading: any\n}\n\nconst SelectChannel: FC<SelectChannelProps> = ({ setisLoading }) => {\n  const [state, dispatch] = useGlobalState()\n  const [getQuery, { data, error, loading }] = useFetchLatestMessagesLazyQuery()\n\n  const onClick = (channel: string) => {\n    setisLoading(true)\n    getQuery({\n      variables: { channelId: channel },\n    }).then((res) => {\n      let d = res.data?.fetchLatestMessages\n      dispatch({ channel: channel, messages: d?.slice(0) })\n      setisLoading(false)\n    })\n  }\n\n  return (\n    <div className=\"SelectChannel\" data-testid=\"SelectChannel\">\n      <Title> 2. Choose Your Channel</Title>\n      <Menu>\n        <li onClick={() => onClick(ChannelId.General)} className={`${state.channel === ChannelId.General && \"active\"}`}>\n          <p>{ChannelId.General}</p>\n        </li>\n        <li\n          onClick={() => onClick(ChannelId.Technology)}\n          className={`${state.channel === ChannelId.Technology && \"active\"}`}\n        >\n          <p>{ChannelId.Technology}</p>\n        </li>\n        <li onClick={() => onClick(ChannelId.Lgtm)} className={`${state.channel === ChannelId.Lgtm && \"active\"}`}>\n          <p>{ChannelId.Lgtm}</p>\n        </li>\n      </Menu>\n    </div>\n  )\n}\n\nexport default SelectChannel\n","/Users/keywalker/Documents/GitHub/Chat-App/src/components/SelectChannel/SelectChannelStyle.ts",[],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/contexts/GlobalContext.tsx",[],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/components/Loading/LoadingStyle.ts",[],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/components/PostMessageButton/PostMessageButton.tsx",["100","101"],[],"import React, { FC } from \"react\"\nimport { ButtonBox } from \"src/globalStyles\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faPaperPlane } from \"@fortawesome/free-solid-svg-icons\"\nimport { useGlobalState } from \"src/contexts/GlobalContext\"\nimport { useMessagePostMutation } from \"src/models\"\n\ninterface PostMessageButtonProps {\n  text?: string\n  setisLoading?: any\n  setDate?: any\n}\n\nconst PostMessageButton: FC<PostMessageButtonProps> = ({ text, setisLoading, setDate }) => {\n  const [state, dispatch] = useGlobalState()\n  const [createMessage, { data, loading, error }] = useMessagePostMutation()\n\n  if (data) {\n    setisLoading(false)\n\n    setDate(data.MessagePost?.datetime)\n  }\n\n  if (error) {\n    console.log(error)\n  }\n\n  const onClick = async () => {\n    setisLoading(true)\n    const variables = { channelId: state.channel, text: state.message.value, userId: state.selectedUser }\n    createMessage({ variables })\n  }\n  return (\n    <div className=\"PostMessageButton\" data-testid=\"PostMessageButton\">\n      <ButtonBox onClick={onClick}>\n        {text} <FontAwesomeIcon icon={faPaperPlane} />\n      </ButtonBox>\n    </div>\n  )\n}\nPostMessageButton.defaultProps = {\n  text: \"Send Message\",\n}\nexport default PostMessageButton\n","/Users/keywalker/Documents/GitHub/Chat-App/src/globalStyles.ts",[],[],"/Users/keywalker/Documents/GitHub/Chat-App/src/components/ReadMoreButton/ReadMoreButton.tsx",["102","103"],[],{"ruleId":"104","severity":1,"message":"105","line":13,"column":45,"nodeType":"106","messageId":"107","endLine":13,"endColumn":74},{"ruleId":"108","severity":1,"message":"109","line":3,"column":1,"nodeType":"110","endLine":9,"endColumn":3},{"ruleId":"111","severity":1,"message":"112","line":37,"column":35,"nodeType":"113","messageId":"114","endLine":37,"endColumn":42},{"ruleId":"115","severity":1,"message":"116","line":49,"column":6,"nodeType":"117","endLine":49,"endColumn":26,"suggestions":"118"},{"ruleId":"119","severity":1,"message":"120","line":95,"column":27,"nodeType":"106","endLine":95,"endColumn":62},{"ruleId":"119","severity":1,"message":"120","line":120,"column":23,"nodeType":"106","endLine":120,"endColumn":65},{"ruleId":"111","severity":1,"message":"121","line":11,"column":22,"nodeType":"113","messageId":"114","endLine":11,"endColumn":26},{"ruleId":"111","severity":1,"message":"122","line":11,"column":28,"nodeType":"113","messageId":"114","endLine":11,"endColumn":33},{"ruleId":"111","severity":1,"message":"112","line":11,"column":35,"nodeType":"113","messageId":"114","endLine":11,"endColumn":42},{"ruleId":"111","severity":1,"message":"123","line":15,"column":17,"nodeType":"113","messageId":"114","endLine":15,"endColumn":25},{"ruleId":"111","severity":1,"message":"112","line":16,"column":33,"nodeType":"113","messageId":"114","endLine":16,"endColumn":40},{"ruleId":"111","severity":1,"message":"112","line":18,"column":25,"nodeType":"113","messageId":"114","endLine":18,"endColumn":32},{"ruleId":"111","severity":1,"message":"121","line":18,"column":34,"nodeType":"113","messageId":"114","endLine":18,"endColumn":38},"react/jsx-pascal-case","Imported JSX component routeProps must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'data', 'dispatch', 'getQuery', and 'state.messages.length'. Either include them or remove the dependency array.","ArrayExpression",["124"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'data' is assigned a value but never used.","'error' is assigned a value but never used.","'dispatch' is assigned a value but never used.",{"desc":"125","fix":"126"},"Update the dependencies array to be: [data, dispatch, getQuery, state.messages.length, state.selectedUser]",{"range":"127","text":"128"},[1527,1547],"[data, dispatch, getQuery, state.messages.length, state.selectedUser]"]