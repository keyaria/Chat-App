{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport let ChannelId;\n\n(function (ChannelId) {\n  ChannelId[\"General\"] = \"General\";\n  ChannelId[\"Lgtm\"] = \"LGTM\";\n  ChannelId[\"Technology\"] = \"Technology\";\n})(ChannelId || (ChannelId = {}));\n\nexport let UserId;\n\n(function (UserId) {\n  UserId[\"Joyse\"] = \"Joyse\";\n  UserId[\"Russell\"] = \"Russell\";\n  UserId[\"Sam\"] = \"Sam\";\n})(UserId || (UserId = {}));\n\nexport const MessagesFetchLatestDocument = gql`\n    query MessagesFetchLatest($channelId: ChannelId!) {\n  MessagesFetchLatest(channelId: $channelId) {\n    messageId\n    text\n    datetime\n    userId\n  }\n}\n    `;\n/**\n * __useMessagesFetchLatestQuery__\n *\n * To run a query within a React component, call `useMessagesFetchLatestQuery` and pass it any options that fit your needs.\n * When your component renders, `useMessagesFetchLatestQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMessagesFetchLatestQuery({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\n\nexport function useMessagesFetchLatestQuery(baseOptions) {\n  _s();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(MessagesFetchLatestDocument, options);\n}\n\n_s(useMessagesFetchLatestQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useMessagesFetchLatestLazyQuery(baseOptions) {\n  _s2();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(MessagesFetchLatestDocument, options);\n}\n\n_s2(useMessagesFetchLatestLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\n\nexport const FetchLatestMessagesDocument = gql`\n    query fetchLatestMessages($channelId: String!) {\n  fetchLatestMessages(channelId: $channelId) {\n    messageId\n    text\n    datetime\n    userId\n  }\n}\n    `;\n/**\n * __useFetchLatestMessagesQuery__\n *\n * To run a query within a React component, call `useFetchLatestMessagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useFetchLatestMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFetchLatestMessagesQuery({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\n\nexport function useFetchLatestMessagesQuery(baseOptions) {\n  _s3();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(FetchLatestMessagesDocument, options);\n}\n\n_s3(useFetchLatestMessagesQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\n\nexport function useFetchLatestMessagesLazyQuery(baseOptions) {\n  _s4();\n\n  const options = { ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(FetchLatestMessagesDocument, options);\n}\n\n_s4(useFetchLatestMessagesLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});","map":{"version":3,"names":["gql","Apollo","defaultOptions","ChannelId","UserId","MessagesFetchLatestDocument","useMessagesFetchLatestQuery","baseOptions","options","useQuery","useMessagesFetchLatestLazyQuery","useLazyQuery","FetchLatestMessagesDocument","useFetchLatestMessagesQuery","useFetchLatestMessagesLazyQuery"],"sources":["/Users/keywalker/chat-app/src/models.tsx"],"sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** A date-time with an offset from UTC/Greenwich in the ISO-8601 calendar system using the format 1970-01-01T00:00:00Z */\n  OffsetDateTime: any;\n};\n\nexport enum ChannelId {\n  General = 'General',\n  Lgtm = 'LGTM',\n  Technology = 'Technology'\n}\n\nexport type Message = {\n  __typename?: 'Message';\n  datetime: Scalars['OffsetDateTime'];\n  messageId: Scalars['String'];\n  text: Scalars['String'];\n  userId: Scalars['String'];\n};\n\nexport type MessageEnum = {\n  __typename?: 'MessageEnum';\n  datetime: Scalars['OffsetDateTime'];\n  messageId: Scalars['String'];\n  text: Scalars['String'];\n  userId: UserId;\n};\n\nexport type Mutations = {\n  __typename?: 'Mutations';\n  /**\n   *\n   *   Post `messages`. return posted datetime when it succeeded\n   *\n   *   Code|Error\n   *   ---|---\n   *   500|`Couldn't save message, please retry.`\n   *\n   */\n  MessagePost?: Maybe<MessageEnum>;\n  /**\n   *\n   *   Post `messages`. return posted datetime when it succeeded\n   *\n   *   - `channelId` should be \"1\" or \"2\" or \"3\"\n   *   - `userId` should be \"Sam\", \"Russell\", \"Joyse\"\n   *\n   *   Code|Error\n   *   ---|---\n   *   400|`Channel not found`\n   *   500|`Couldn't save message, please retry.`\n   *\n   */\n  postMessage?: Maybe<Message>;\n};\n\n\nexport type MutationsMessagePostArgs = {\n  channelId: ChannelId;\n  text: Scalars['String'];\n  userId: UserId;\n};\n\n\nexport type MutationsPostMessageArgs = {\n  channelId: Scalars['String'];\n  text: Scalars['String'];\n  userId: Scalars['String'];\n};\n\nexport type Queries = {\n  __typename?: 'Queries';\n  /**\n   *\n   *   get latest `messages`\n   *\n   *   - `message` length is at most 10\n   *\n   *   Code|Error\n   *   ---|---\n   *\n   */\n  MessagesFetchLatest?: Maybe<Array<MessageEnum>>;\n  /**\n   *\n   *   Get more `messages`.\n   *\n   *   - if `old` = true, you can fetch older messages than messageId\n   *   - if `old` = false, you can fetch newer messages than messageId\n   *   - `message` length is at most 10\n   *\n   *   Code|Error\n   *   ---|---\n   *   400|`Message not found`\n   *\n   */\n  MessagesFetchMore?: Maybe<Array<MessageEnum>>;\n  /**\n   *\n   *   get latest `messages`\n   *\n   *   - `channelId` should be \"1\" or \"2\" or \"3\"\n   *   - `message` length is at most 10\n   *\n   *   Code|Error\n   *   ---|---\n   *   400|`Channel not found`\n   *\n   */\n  fetchLatestMessages?: Maybe<Array<Message>>;\n  /**\n   *\n   *   Get more `messages`.\n   *\n   *   - if `old` = true, you can fetch older messages than messageId\n   *   - if `old` = false, you can fetch newer messages than messageId\n   *   - `message` length is at most 10\n   *\n   *   Code|Error\n   *   ---|---\n   *   400|`Channel not found`\n   *   400|`Message not found`\n   *\n   */\n  fetchMoreMessages?: Maybe<Array<Message>>;\n};\n\n\nexport type QueriesMessagesFetchLatestArgs = {\n  channelId: ChannelId;\n};\n\n\nexport type QueriesMessagesFetchMoreArgs = {\n  channelId: ChannelId;\n  messageId: Scalars['String'];\n  old: Scalars['Boolean'];\n};\n\n\nexport type QueriesFetchLatestMessagesArgs = {\n  channelId: Scalars['String'];\n};\n\n\nexport type QueriesFetchMoreMessagesArgs = {\n  channelId: Scalars['String'];\n  messageId: Scalars['String'];\n  old: Scalars['Boolean'];\n};\n\nexport enum UserId {\n  Joyse = 'Joyse',\n  Russell = 'Russell',\n  Sam = 'Sam'\n}\n\nexport type MessagesFetchLatestQueryVariables = Exact<{\n  channelId: ChannelId;\n}>;\n\n\nexport type MessagesFetchLatestQuery = { __typename?: 'Queries', MessagesFetchLatest?: Array<{ __typename?: 'MessageEnum', messageId: string, text: string, datetime: any, userId: UserId }> | null };\n\nexport type FetchLatestMessagesQueryVariables = Exact<{\n  channelId: Scalars['String'];\n}>;\n\n\nexport type FetchLatestMessagesQuery = { __typename?: 'Queries', fetchLatestMessages?: Array<{ __typename?: 'Message', messageId: string, text: string, datetime: any, userId: string }> | null };\n\n\nexport const MessagesFetchLatestDocument = gql`\n    query MessagesFetchLatest($channelId: ChannelId!) {\n  MessagesFetchLatest(channelId: $channelId) {\n    messageId\n    text\n    datetime\n    userId\n  }\n}\n    `;\n\n/**\n * __useMessagesFetchLatestQuery__\n *\n * To run a query within a React component, call `useMessagesFetchLatestQuery` and pass it any options that fit your needs.\n * When your component renders, `useMessagesFetchLatestQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMessagesFetchLatestQuery({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useMessagesFetchLatestQuery(baseOptions: Apollo.QueryHookOptions<MessagesFetchLatestQuery, MessagesFetchLatestQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MessagesFetchLatestQuery, MessagesFetchLatestQueryVariables>(MessagesFetchLatestDocument, options);\n      }\nexport function useMessagesFetchLatestLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MessagesFetchLatestQuery, MessagesFetchLatestQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MessagesFetchLatestQuery, MessagesFetchLatestQueryVariables>(MessagesFetchLatestDocument, options);\n        }\nexport type MessagesFetchLatestQueryHookResult = ReturnType<typeof useMessagesFetchLatestQuery>;\nexport type MessagesFetchLatestLazyQueryHookResult = ReturnType<typeof useMessagesFetchLatestLazyQuery>;\nexport type MessagesFetchLatestQueryResult = Apollo.QueryResult<MessagesFetchLatestQuery, MessagesFetchLatestQueryVariables>;\nexport const FetchLatestMessagesDocument = gql`\n    query fetchLatestMessages($channelId: String!) {\n  fetchLatestMessages(channelId: $channelId) {\n    messageId\n    text\n    datetime\n    userId\n  }\n}\n    `;\n\n/**\n * __useFetchLatestMessagesQuery__\n *\n * To run a query within a React component, call `useFetchLatestMessagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useFetchLatestMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFetchLatestMessagesQuery({\n *   variables: {\n *      channelId: // value for 'channelId'\n *   },\n * });\n */\nexport function useFetchLatestMessagesQuery(baseOptions: Apollo.QueryHookOptions<FetchLatestMessagesQuery, FetchLatestMessagesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<FetchLatestMessagesQuery, FetchLatestMessagesQueryVariables>(FetchLatestMessagesDocument, options);\n      }\nexport function useFetchLatestMessagesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FetchLatestMessagesQuery, FetchLatestMessagesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<FetchLatestMessagesQuery, FetchLatestMessagesQueryVariables>(FetchLatestMessagesDocument, options);\n        }\nexport type FetchLatestMessagesQueryHookResult = ReturnType<typeof useFetchLatestMessagesQuery>;\nexport type FetchLatestMessagesLazyQueryHookResult = ReturnType<typeof useFetchLatestMessagesLazyQuery>;\nexport type FetchLatestMessagesQueryResult = Apollo.QueryResult<FetchLatestMessagesQuery, FetchLatestMessagesQueryVariables>;"],"mappings":";;;;;AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;AAMA,MAAMC,cAAc,GAAG,EAAvB;AACA;;AAWA,WAAYC,SAAZ;;WAAYA,S;EAAAA,S;EAAAA,S;EAAAA,S;GAAAA,S,KAAAA,S;;AAiJZ,WAAYC,MAAZ;;WAAYA,M;EAAAA,M;EAAAA,M;EAAAA,M;GAAAA,M,KAAAA,M;;AAqBZ,OAAO,MAAMC,2BAA2B,GAAGL,GAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KATO;AAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASM,2BAAT,CAAqCC,WAArC,EAAwI;EAAA;;EACvI,MAAMC,OAAO,GAAG,EAAC,GAAGN,cAAJ;IAAoB,GAAGK;EAAvB,CAAhB;EACA,OAAON,MAAM,CAACQ,QAAP,CAA6EJ,2BAA7E,EAA0GG,OAA1G,CAAP;AACD;;GAHSF,2B;UAEDL,MAAM,CAACQ,Q;;;AAEtB,OAAO,SAASC,+BAAT,CAAyCH,WAAzC,EAAiJ;EAAA;;EAC9I,MAAMC,OAAO,GAAG,EAAC,GAAGN,cAAJ;IAAoB,GAAGK;EAAvB,CAAhB;EACA,OAAON,MAAM,CAACU,YAAP,CAAiFN,2BAAjF,EAA8GG,OAA9G,CAAP;AACD;;IAHOE,+B;UAECT,MAAM,CAACU,Y;;;AAKxB,OAAO,MAAMC,2BAA2B,GAAGZ,GAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KATO;AAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASa,2BAAT,CAAqCN,WAArC,EAAwI;EAAA;;EACvI,MAAMC,OAAO,GAAG,EAAC,GAAGN,cAAJ;IAAoB,GAAGK;EAAvB,CAAhB;EACA,OAAON,MAAM,CAACQ,QAAP,CAA6EG,2BAA7E,EAA0GJ,OAA1G,CAAP;AACD;;IAHSK,2B;UAEDZ,MAAM,CAACQ,Q;;;AAEtB,OAAO,SAASK,+BAAT,CAAyCP,WAAzC,EAAiJ;EAAA;;EAC9I,MAAMC,OAAO,GAAG,EAAC,GAAGN,cAAJ;IAAoB,GAAGK;EAAvB,CAAhB;EACA,OAAON,MAAM,CAACU,YAAP,CAAiFC,2BAAjF,EAA8GJ,OAA9G,CAAP;AACD;;IAHOM,+B;UAECb,MAAM,CAACU,Y"},"metadata":{},"sourceType":"module"}